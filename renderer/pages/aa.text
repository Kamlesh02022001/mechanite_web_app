const ProductionPage = () => {
  const route = useRoute();
  const {WorkOrderId} = route.params;
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState({});
  const [startDate, setStartDate] = useState(new Date());
  const [showPicker, setShowPicker] = useState(false);
  const [operators, setOperators] = useState([]);
  const [selectedOperator, setSelectedOperator] = useState('');
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [workOrderNumber, setWorkOrderNumber] = useState('');
  const [selectedOperators, setSelectedOperators] = useState([]);
  const [showFinishedDatePicker, setShowFinishedDatePicker] = useState(false);
  const [showShiftDatePicker, setShowShiftDatePicker] = useState(false);

  const [formData, setFormData] = useState({
    shiftDate: '',
    operatorId: '',
    standardQty: '',
    okQty: '',
    rejectedQty: '',
    reasonOfRejection: '',
    workingHrs: '',
    runnerKgs: '',
    LumpsKgs: '',
    remark: '',
    efficiency: '',
    usedMachineNumber: '',
    finishedDate: '',
  });

  const toggleOperatorSelection = operatorId => {
    setSelectedOperators(
      prevSelected =>
        prevSelected.includes(operatorId)
          ? prevSelected.filter(id => id !== operatorId) // Unselect
          : [...prevSelected, operatorId], // Select
    );
  };

  const getCurrentMonthYear = () => {
    const date = new Date();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${month}/${year}`;
  };

  const fetchNextWorkOrderNumber = async () => {
    try {
      const response = await axios.get(
        'http://192.168.0.119:4000/get-next-work-order-number',
      );

      console.log('API Response for Work Order:', response.data); 

      if (response.data.workOrderNumber) {
        setWorkOrderNumber(response.data.workOrderNumber);
        console.log(
          '✅ Work Order Set in State:',
          response.data.workOrderNumber,
        );
      } else {
        console.error(
          '⚠️ Work Order Number missing in response:',
          response.data,
        );
        setWorkOrderNumber(null);
      }
    } catch (error) {
      console.error('❌ Error fetching next work order number:', error);
      setWorkOrderNumber(null);
    }
  };

  useEffect(() => {
    fetchNextWorkOrderNumber(); 
    fetchOperators();
  }, []);

  const handleSave = async () => {
    console.log('🚀 Saving Work Order Number:', workOrderNumber); 

    if (!workOrderNumber) {
      Alert.alert('⚠️ Error', 'Work Order Number is missing!');
      return;
    }

    try {
      const saveData = {
        work_order_no: workOrderNumber, 
        shift_date: formData.shiftDate || null,
        operator_id: selectedOperator || null,
        standard_qty: formData.standardQty
          ? Number(formData.standardQty)
          : null,
        ok_qty: formData.okQty ? Number(formData.okQty) : null,
        rejected_qty: formData.rejectedQty
          ? Number(formData.rejectedQty)
          : null,
        reason_of_rejection: formData.reasonOfRejection || null,
        working_hours: formData.workingHrs ? Number(formData.workingHrs) : null,
        runners_kg: formData.runnerKgs ? Number(formData.runnerKgs) : null,
        lumps_kg: formData.LumpsKgs ? Number(formData.LumpsKgs) : null,
        remarks: formData.remark || null,
        efficiency: formData.efficiency ? Number(formData.efficiency) : null,
        used_machine_no: formData.usedMachineNumber || null,
        finish_date: formData.finishedDate || null,
      };

      console.log('📤 Data Sent to Backend:', saveData); 
      Alert.alert('✅ Success', 'Work Order saved successfully!');
      const response = await axios.put(
        `http://192.168.0.119:4000/work-order/update/${WorkOrderId}`,
        saveData,
      );

      if (response.status === 200) {
        console.log('✅ Work Order Saved Successfully');

        
        await fetchNextWorkOrderNumber();
        await fetchWorkOrder(); 
      } else {
        Alert.alert('❌ Error', 'Failed to save production data.');
      }
    } catch (error) {
      console.error('❌ Error saving data:', error);
      Alert.alert('❌ Error', 'Something went wrong while saving.');
    }
  };

  const handleDateChange = (event, selectedDate) => {
    setShowPicker(false);
    if (selectedDate) {
      setStartDate(selectedDate);
    }
  };

  const handleFinishedDateChange = (event, selectedDate, field) => {
    if (selectedDate) {
      const formattedDate = selectedDate.toLocaleDateString('en-GB');
            setFormData(prevData => ({...prevData, [field]: formattedDate}));
    }
    if (field === 'finishedDate') setShowFinishedDatePicker(false);
    if (field === 'shiftDate') setShowShiftDatePicker(false);
  };

  const fetchOperators = async () => {
    try {
      const response = await axios.get('http://192.168.0.119:4000/users/all');
      if (response.data.operator) {
        setOperators(response.data.operator);
      } else {
        setOperators([]);
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to fetch operators.');
      console.error('Fetch Operators Error:', error);
    }
  };

  const calculateEfficiency = (okQty, workingHrs) => {
    const okQtyNum = Number(okQty);
    const workingHrsNum = Number(workingHrs);
    const cycleTime = Number(data.product?.cycle_time);
    const efficiency = Number(data.product?.efficiency);
    const noOfCavities = Number(data.product?.no_of_cavities);

    if (
      isNaN(okQtyNum) ||
      isNaN(workingHrsNum) ||
      isNaN(cycleTime) ||
      isNaN(efficiency) ||
      isNaN(noOfCavities) ||
      workingHrsNum === 0
    ) {
      return '';
    }

    const workingSeconds = workingHrsNum * 60 * 60;
    const calculatedEfficiency =
      ((okQtyNum * cycleTime) / workingSeconds) *
      efficiency *
      noOfCavities *
      100;

    return calculatedEfficiency.toFixed(2);
  };

  const handleInputChange = (field, value) => {
    console.log(`Handling input change for ${field}:`, value);

    setFormData(prevData => {
      const newData = {...prevData, [field]: value};

      if (
        (field === 'okQty' || field === 'workingHrs') &&
        newData.okQty &&
        newData.workingHrs
      ) {
        const newEfficiency = calculateEfficiency(
          newData.okQty,
          newData.workingHrs,
        );
        newData.efficiency = newEfficiency;
      }

      return newData;
    });
  };

  const fetchWorkOrder = async () => {
    try {
      const response = await axios.get(
        `http://192.168.0.119:4000/work-order/${WorkOrderId}`,
      );
      setData(response.data.data);
      console.log('✅ Work Order Data:', response.data.data);

      // ✅ Ensure workOrderNumber is set correctly for this specific WorkOrderId
      setWorkOrderNumber(
        response.data.data.work_order_no || 'MES/WO/0000/0000',
      );

      setFormData({
        shiftDate: response.data.data.shift_date || '',
        operatorId: response.data.data.operator_id || '',
        standardQty: response.data.data.standard_qty?.toString() || '',
        okQty: response.data.data.ok_qty?.toString() || '',
        rejectedQty: response.data.data.rejected_qty?.toString() || '',
        reasonOfRejection: response.data.data.reason_of_rejection || '',
        workingHrs: response.data.data.working_hours?.toString() || '',
        runnerKgs: response.data.data.runners_kg?.toString() || '',
        LumpsKgs: response.data.data.lumps_kg?.toString() || '',
        remark: response.data.data.remarks || '',
        efficiency: response.data.data.efficiency?.toString() || '',
        usedMachineNumber: response.data.data.used_machine_no || '',
        finishedDate: response.data.data.finish_date || '',
      });

      setIsSubmitted(response.data.data.shift_date !== null);

      if (response.data.data.operator_id) {
        setSelectedOperator(response.data.data.operator_id);
      }
    } catch (error) {
      console.error('❌ Error fetching work order:', error);
      Alert.alert('❌ Error', 'Failed to load work order data.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOperators();
  }, []);

  useEffect(() => {
    if (WorkOrderId) {
      fetchWorkOrder();
    }
  }, [WorkOrderId]);

  if (loading) {
    return <ActivityIndicator size="large" color="#0000ff" />;
  }

  if (!data) {
    return <Text>No data available.</Text>;
  }

  return (
    <>
      <View style={styles.mainContainer}>
        <ScrollView style={styles.container}>
          <View style={styles.card}>
            {/* <Text style={styles.woLabel}>
            MES/WO/{getCurrentMonthYear()}/0001
          </Text> */}
            <Text style={styles.woLabel}>{workOrderNumber}</Text>

            <View>
              <Text style={styles.dateLabel}>
                Date: {startDate.toLocaleDateString()}
              </Text>

              <TouchableOpacity
                onPress={() => setShowPicker(true)}
                style={styles.dateButton}>
                <Text style={styles.buttonText}>Select Date</Text>
              </TouchableOpacity>

              {showPicker && (
                <DateTimePicker
                  value={startDate}
                  mode="date"
                  display="default"
                  onChange={handleDateChange}
                />
              )}
            </View>

            <Text style={styles.label}>
              Customer Name: {data.product?.customer?.customer_name || 'N/A'}
            </Text>
            <Text style={styles.label}>
              Item No: {data.product?.item_code || 'N/A'}
            </Text>
            <Text style={styles.label}>
              Part Name: {data.product?.component_description || 'N/A'}
            </Text>

            <View style={styles.tableContainer}>
              <View style={styles.tableHeader}>
                <Text style={styles.tableHeaderText}>Raw Material Type</Text>
                <Text style={styles.tableHeaderText}>Name</Text>
                <Text style={styles.tableHeaderText}>Required Quantity</Text>
              </View>

              {data.workOrderRawMaterials &&
              data.workOrderRawMaterials.length > 0 ? (
                data.workOrderRawMaterials.map((material, index) => (
                  <View key={index} style={styles.tableRow}>
                    <Text style={styles.tableCell}>
                      {material.material_type || 'N/A'}
                    </Text>
                    <Text style={styles.tableCell}>
                      {material.rawMaterial?.material_name || 'N/A'}
                    </Text>
                    <Text style={styles.tableCell}>
                      {material.required_quantity || '0'}{' '}
                      {material.material_type === 'material' ||
                      material.material_type === 'colour'
                        ? 'kg'
                        : material.material_type === 'insert'
                        ? 'No.'
                        : ''}
                    </Text>
                  </View>
                ))
              ) : (
                <Text style={styles.noDataText}>
                  No raw materials available
                </Text>
              )}
            </View>

            <Text style={styles.label}>
              Scheduled Machine No:{' '}
              {data.product?.product_histories?.scheduled_machine_number ||
                'N/A'}
            </Text>

            <Text style={styles.label}>
              Expected Quantity: {data.sales_order_quantity}
            </Text>
            <Text style={styles.label}>
              Mold Number: {data.product?.mold_no || 'N/A'}
            </Text>

            <Text style={styles.label}>Used Machine Number:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter used machine number"
              value={formData.usedMachineNumber}
              onChangeText={text =>
                handleInputChange('usedMachineNumber', text)
              }
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Finished Date:</Text>
            <TouchableOpacity
              style={styles.input}
              onPress={() => setShowFinishedDatePicker(true)}>
              <Text>{formData.finishedDate || 'Select Date'}</Text>
            </TouchableOpacity>

            {showFinishedDatePicker && (
              <DateTimePicker
                value={
                  formData.finishedDate
                    ? new Date(formData.finishedDate)
                    : new Date()
                }
                mode="date"
                minimumDate={new Date()}
                display={Platform.OS === 'ios' ? 'inline' : 'default'}
                onChange={(event, date) => {
                  setShowFinishedDatePicker(false); 
                  if (date) {
                    handleFinishedDateChange(event, date, 'finishedDate');
                  }
                }}
              />
            )}

            {/* Shift Date Picker */}
            <Text style={styles.label}>Shift/Date:</Text>
            <TouchableOpacity
              style={styles.input}
              onPress={() => setShowShiftDatePicker(true)}>
              <Text>{formData.shiftDate || 'Select Date'}</Text>
            </TouchableOpacity>
            {showShiftDatePicker && (
              <DateTimePicker
                value={
                  formData.shiftDate ? new Date(formData.shiftDate) : new Date()
                }
                mode="date"
                minimumDate={new Date()}
                display={Platform.OS === 'ios' ? 'inline' : 'default'}
                onChange={(event, date) =>
                  handleFinishedDateChange(event, date, 'shiftDate')
                }
              />
            )}

            <Text style={styles.label}>Operator Name:</Text>
            <View style={styles.pickerContainer}>
              <Picker
                selectedValue={selectedOperator}
                onValueChange={itemValue =>
                  !isSubmitted && setSelectedOperator(itemValue)
                }
                style={[styles.picker, isSubmitted && styles.readOnlyPicker]}
                // enabled={!isSubmitted}
              >
                <Picker.Item label="Select Operator" value="" />
                {operators.map(operator => (
                  <Picker.Item
                    key={operator.id}
                    label={operator.name}
                    value={operator.id}
                  />
                ))}
              </Picker>
            </View>

            {/* <MultiOperatorSelect
  operators={operators}
  selectedOperators={selectedOperators}
  setSelectedOperators={setSelectedOperators}
  isSubmitted={isSubmitted} 
/> */}

            <Text style={styles.label}>Standard Qty:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter standard quantity"
              value={formData.standardQty}
              onChangeText={text => handleInputChange('standardQty', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Working Hrs:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter working hours"
              value={formData.workingHrs}
              onChangeText={text => handleInputChange('workingHrs', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>OK Qty No's:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter OK quantity"
              value={formData.okQty}
              onChangeText={text => handleInputChange('okQty', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Rejected Qty No's:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter rejected quantity"
              value={formData.rejectedQty}
              onChangeText={text => handleInputChange('rejectedQty', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Reason of Rejection:</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter reason of rejection"
              value={formData.reasonOfRejection}
              onChangeText={text =>
                handleInputChange('reasonOfRejection', text)
              }
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Runner (Kg's):</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter runner kg"
              value={formData.runnerKgs}
              onChangeText={text => handleInputChange('runnerKgs', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Lumps (Kg's):</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter Lumps kg"
              value={formData.LumpsKgs}
              onChangeText={text => handleInputChange('LumpsKgs', text)}
              keyboardType="numeric"
              editable={!isSubmitted}
            />

            <Text style={styles.label}>Operator Efficiency (%):</Text>
            <TextInput
              style={[styles.input, {backgroundColor: '#f0f0f0'}]}
              placeholder="Efficiency"
              value={formData.efficiency}
              editable={false}
            />

            <Text style={styles.label}>Remark:</Text>
            <Picker
              selectedValue={formData.remark}
              style={styles.picker}
              onValueChange={value => handleInputChange('remark', value)}>
              <Picker.Item
                label="Machine Breakdown"
                value="Machine Breakdown"
              />
              <Picker.Item label="Mold Breakdown" value="Mold Breakdown" />
              <Picker.Item label="No Man Power" value="No Man Power" />
              <Picker.Item label="Power off" value="Power off" />
              <Picker.Item label="RM Shortage" value="RM Shortage" />
              <Picker.Item label="No Plan" value="No Plan" />
            </Picker>
          </View>
          <View style={styles.horizontalTableContainer}>
            <ScrollView horizontal={true} style={styles.horizontalScroll}>
              <View>
                {/* Table Header */}
                <View style={styles.headerRow}>
                  <Text style={styles.headerCell}>Operator Name</Text>
                  <Text style={styles.headerCell}>Standard Qty</Text>
                  <Text style={styles.headerCell}>Working Hrs</Text>
                  <Text style={styles.headerCell}>OK Qty</Text>
                  <Text style={styles.headerCell}>Rejected Qty</Text>
                  <Text style={styles.headerCell}>Rejection Reason</Text>
                  <Text style={styles.headerCell}>Runner (Kg's)</Text>
                  <Text style={styles.headerCell}>Lumps (Kg's)</Text>
                  <Text style={styles.headerCell}>Efficiency (%)</Text>
                  <Text style={styles.headerCell}>Remark</Text>
                </View>

                {/* Table Data */}
                <View style={styles.dataRow}>
                  <Text style={styles.dataCell}>
                    {selectedOperator
                      ? operators.find(op => op.id === selectedOperator)?.name
                      : 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.standardQty || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.workingHrs || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>{formData.okQty || 'N/A'}</Text>
                  <Text style={styles.dataCell}>
                    {formData.rejectedQty || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.reasonOfRejection || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.runnerKgs || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.LumpsKgs || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.efficiency || 'N/A'}
                  </Text>
                  <Text style={styles.dataCell}>
                    {formData.remark || 'N/A'}
                  </Text>
                </View>
              </View>
            </ScrollView>

            {/* Add More Button */}
            <TouchableOpacity style={styles.addButton}>
              <Text style={styles.addButtonText}>Add More</Text>
            </TouchableOpacity>
          </View>
          <TouchableOpacity
            style={[styles.saveButton, isSubmitted && styles.disabledButton]}
            onPress={handleSave}>
            <Text style={styles.saveButtonText}>Save</Text>
          </TouchableOpacity>
        </ScrollView>
      </View>
    </>
  );
};